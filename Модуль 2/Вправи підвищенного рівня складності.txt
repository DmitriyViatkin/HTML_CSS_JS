//Вправи підвищенного рівня складності — Змінні, методи, функції

/*Вправа 1 — Складаємо речення з трьох слів
Напишіть функцію з назвою phrase3words (речення з 3 слів), щоб об’єднати три змінні типу «рядок» (string) у зв’язну фразу з пробілами між словами. Функція phrase3words матиме три параметри зі значеннями value1, value2 і value3. Ця функція послідовно об’єднує слова у фразу, яка починається з першого значення (value1), пробіл, потім йде друге значення (value2), пробіл, та завершується третім значенням (value3).

Приклад коду внизу — це початок для виконання вправи. Він визначає функцію phrase3words, викликає її тричі, та щоразу виводить нову відповідь на екран. */

function phrase3words(value1, value2, value3) {
    var answer = (value1+" "+value2+" "+value3) ;  
    return answer;
}
/*ВИВІД:
smile at everyone
everyone wave back
coding is fun*/
var result1 = phrase3words("smile","at","everyone");
print(result1);
var result2 = phrase3words("everyone","wave", "back");
print(result2);
var result3 = phrase3words("coding","is", "fun");
print(result3);

/*Вправа 2 — Форматування імені
Створіть функцію форматування імені (reformatName), що виводить ім’я у заданому вигляді. Ця функція reformatName матиме два параметри: ім’я (first) та прізвище (last), та виводитиме їх на екран у такому порядку: спочатку прізвище, потім кома і пробіл, наприкінці рядка – ім’я. Наприклад, функція reformatName("Susan", "Rodger") повертатиме рядок «Rodger, Susan», тоді як reformatName("Robert", "Duvall") — рядок «Duvall, Robert».

Нижче ми розпочали писати цю функцію, однак основна частина коду — за вами.*/

//КОД:
function reformatName(first, last) {
    return (last+", "+first);
}
var result = reformatName("Susan", "Rodger");
print(result);
result = reformatName("Robert", "Duvall");
print(result);
/*
ВИВІД:
Rodger, Susan
Duvall, Robert*/

/*Вправа 3 — Кількість пікселів зображення
Створіть функцію numberPixels, що визначатиме загальну кількість пікселів (точок) зображення. Функція опрацьовуватиме лише один параметр namefile — рядок з назвою файлу для обчислення і повернення кількості точок вказаного зображення.

Наприклад, функція numberPixels для зображення каплиці (chapel.png) поверне 71148, а для картинки з динозаврами (dinos.png) — 2073600. Обидва зображення розміщені на сайті dukelearntoprogram.com, де також вказано розмір кожного з них. Так, картинка з каплицею (chapel.png) містить 231 піксель в ширину та 308 пікселів у висоту (якщо помножити 231*308, отримаємо 71148 точок загалом). Для динозаврів (dinos.png) вказані такі параметри: 1920 пікселів у ширину і 1080 пікселів у висоту, тоді як 1920*1080 становити 2073600 точок.

Нижче ми зазначили початок коду, утім ви маєте доповнити його замість рядка «// код тут». Зауважте, що спочатку треба створити SimpleImage з файлу, після чого ви можете застосувати  методи до змінної someImg, зокрема отримати висоту getHeight(), щоб підрахувати кількості точок у висоті зображення.

КОД:*/
function numberPixels(namefile) {
    var someImg = new SimpleImage(namefile);
    var height = someImg.getHeight(); 
    var width = someImg.getWidth();
    return height*width;
}
var result = numberPixels("chapel.png");
print(result);
result = numberPixels("dinos.png");
print(result);

/*ВИВІД:
71148
2073600*/

/*Вправа 4 — Периметр зображення
Напишіть функцію для визначення кількості пікселів по периметру зображення (perimeter). Периметр, як відомо, — це сума кількості точок з усіх чотирьох сторін прямокутника. Тож функція perimeter матиме один параметр imageName типу рядок з назвою файлу зображення. Ця функція обчислює і повертає периметр у вказаному файлі зображення.

Наприклад, світлина професорки Роджер «rodger.png» має 315 пікселі у ширину і 424 пікселі у висоту. Що, відповідно, по 315 пікселів зверху й знизу, та по 424 ліворуч й праворуч – межі запропонованого зображення. Периметр цього зображення дорівнюватиме 315 + 315 + 424 + 424 =  1478. А функція периметра для фото професорки Роджер («rodger.png») поверне 1478.

Початок коду цієї функції ви бачите нижче. Доповніть його, щоб отримати бажаний вивід

КОД:*/
function perimeter(imageName) {
    var someImg = new SimpleImage(imageName);
    var height = someImg.getHeight(); 
    var width = someImg.getWidth();
    return 2*(height+width);
}

print(perimeter("rodger.png"));

//ВИВІД:
//1478

/*Вправа 5 — Виведення RGB-значень пікселя
Напишіть функцію printPixel, яка виводитиме значення пікселів червоного, синього та зеленого кольорів у вказаному порядку, по одному значенню в кожному рядку, з коротким описом кожного з них. Для функції printPixel задайте три параметри: namefile (рядок з назвою файлу зображення), координати розташування пікселів по осі х та у відповідно — xpos та ypos, що відповідатимуть певним числовим значенням. Пропонуємо застосувати лише методи SimpleImage, а саме: getRed, getGreen, і getBlue. Зауважте, що в цьому разі інструкція return не потрібна, оскільки функція printPixel виводитиме певні значення. 

Для прикладу, на запропонованій світлині з назвою drewgreen.png, Дрю стоїть в центрі (посередині) зображення на яскраво-зеленому тлі. Відповідно перший піксель за координатами x та y матиме значення (10,10) – йдеться про яскраво-зелений колір біля краю зображення. Відповідно його значення червоного, зеленого та синього будуть такі: трохи R (0), багато G (255) і жодного B (0). Другий піксель, що є частиною Дрю, знаходиться рівно посередині зображення. Спробуйте завершити код цієї функції, зазначений нижче.

КОД:*/
function printPixel(nameImage, xpos, ypos){
    
    var someImage = new SimpleImage(nameImage);
    //return someImage.getPixel(xpos,ypos);
    
    print( "red is" + someImage.getRed(xpos,ypos));
    print( "green is" + someImage.getGreen(xpos,ypos));    
    print( "blue is" + someImage.getBlue(xpos,ypos));
}
printPixel("drewgreen.png",10, 10);
printPixel("drewgreen.png",250, 500);
/*ВИВІД:
red is 0
green is 255
blue is 0
red is 102
green is 90
blue is 80*/

/*Вправа 6 — Сумма значень RGB для пікселя
Напишіть функцію для додавання пікселів червоного, синього і зеленого кольорів (sumPixel). Для неї вам знадобиться три параметри: namefile (рядок із назвою файлу зображення), а також числові значення розташування пікселів за осями х та у (xpos, ypos). Ця функція повертатиме значення, тож НЕ МАЄ містити інструкцій для виводу даних (print), замість неї має бути інструкція повернення (return).

Знову розгляньмо світлину Дрю (drewgreen.png).  Піксель з координатами (250,500) має 102 червоних пікселів, 90 зелених і 80 синіх. Отже, функція sumPixel("drewgreen.png", 250, 500) має повернути таку кількість пікселів: 102+90+80 = 272. Піксель за координатами (10,10) містить 0 червоного, 255 зеленого і жодного синього (0), а функція sumPixel("drewgreen.png", 10, 10) має повернути суму 0 + 255 + 0 = 256.

Ви маєте продовжити запропоновану нижче функцію.

КОД:*/
function sumPixel(nameOfImage, xpos, ypos) {
    var theImage = new SimpleImage(nameOfImage) ;
    var redNumber = theImage.getRed(xpos,ypos);
    var blueNumber = theImage.getBlue(xpos,ypos);
    var greenNumber = theImage.getGreen(xpos,ypos);
    return redNumber + blueNumber + greenNumber;
}
var answer = sumPixel("drewgreen.png", 250, 500);
print(answer);
answer = sumPixel("drewgreen.png",10, 10);
print(answer);
/*
ВИВІД:
272
255*/


